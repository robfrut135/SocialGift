package org.mobilecloud.capstone.potlach.cloudservices;

import java.io.IOException;
import java.util.Collection;

import org.mobilecloud.capstone.potlach.cloudservices.repository.FlagRepository;
import org.mobilecloud.capstone.potlach.common.api.FlagSvcApi;
import org.mobilecloud.capstone.potlach.common.repository.Flag;
import org.mobilecloud.capstone.potlach.common.repository.Flag.FlagType;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;

import retrofit.http.Query;

@Controller
public class FlagController {
	
	public static final String FLAG_FORMAT_RESPONSE = "application/json";
	
	@Autowired
	private FlagRepository flagRepository;
 
	@RequestMapping(value = FlagSvcApi.FLAG_SVC_PATH, method = RequestMethod.POST, produces = FLAG_FORMAT_RESPONSE)
	public @ResponseBody ResponseEntity<Flag> addFlag(@RequestBody Flag f){
				
		Flag flag = flagRepository.save(f);
		return new ResponseEntity<Flag>(flag, HttpStatus.ACCEPTED);
	}	
	
	@RequestMapping(value = FlagSvcApi.FLAG_SVC_PATH + "/{id}", method = RequestMethod.DELETE, produces = FLAG_FORMAT_RESPONSE)
	public @ResponseBody ResponseEntity<Flag> deleteFlag(@RequestBody Flag f) throws IOException{
				
		flagRepository.delete(f);	
		return new ResponseEntity<>(HttpStatus.ACCEPTED);
	}
	
	@RequestMapping(value = FlagSvcApi.FLAG_BY_GIFT_AND_TYPE_SVC_PATH , method = RequestMethod.GET, produces = FLAG_FORMAT_RESPONSE)
	public @ResponseBody ResponseEntity<Collection<Flag>> findFlagByGiftAndType(@Query(FlagSvcApi.GIFT_PARAMETER) String gift, @Query(FlagSvcApi.TYPE_PARAMETER) FlagType type){
		
		Collection<Flag> flags = flagRepository.findFlagByGiftAndType(gift, type);
		return new ResponseEntity<Collection<Flag>>(flags, HttpStatus.ACCEPTED);
		
	}
	
	@RequestMapping(value = FlagSvcApi.FLAG_BY_USER_AND_GIFT_AND_TYPE_SVC_PATH , method = RequestMethod.GET, produces = FLAG_FORMAT_RESPONSE)
	public  @ResponseBody ResponseEntity<Collection<Flag>> findFlagByUserAndGiftAndType(@Query(FlagSvcApi.USER_PARAMETER) String user, @Query(FlagSvcApi.GIFT_PARAMETER) String gift, @Query(FlagSvcApi.TYPE_PARAMETER) FlagType type){
		
		Collection<Flag> flags = flagRepository.findFlagByUserAndGiftAndType(user, gift, type);
		return new ResponseEntity<Collection<Flag>>(flags, HttpStatus.ACCEPTED);
		
	}
}
